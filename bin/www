#!/usr/bin/env node

/**
 * Variables to change functionality easily
 */

// Time between samples in seconds
var SAMPLE_TIME = 1;
// When true, stops readings if no clients connected
var ONLY_READ_WHEN_CLIENTS_CONNECTED = false;

/**
 * Module dependencies.
 */

// var rpm = require('./node/read_rpm');

var app = require('../app');
var debug = require('debug')('energydemo-server:server');
var http = require('http');

/**
 * Add python-shell module to execute python scripts
 */

var PythonShell = require('python-shell');

// Set up default options
PythonShell.defaultOptions = { 
    mode: 'json',
    // pythonPath: '/usr/bin/python3',
    scriptPath: './bin/python'
};

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Setup socket.io and define all functionality
 */

var io = require('socket.io').listen(server);

var readSensorFlag = 0;
var clientCount = 0;

io.on('connection', function (client) {
    // Keep track of connected clients
    console.log('Client connected');
    clientCount++;
    console.log('Connected clients: ' + clientCount);
    
    // Tell the user the status of the sensor script
    io.emit('toggleStatus', readSensorFlag);

    client.on('disconnect', function () {
        console.log('Client disconnected');
        if (clientCount > 0) clientCount--;
        console.log('Connected clients: ' + clientCount);
        // Optional code to stop readings when no clients connected
        if (ONLY_READ_WHEN_CLIENTS_CONNECTED) {
            if (clientCount == 0 && readSensorFlag) {
                console.log('No clients connected, stopping readings...')
                clearInterval(intervalID);
                readSensorFlag = 0;
            };
        };
    });

    client.on('toggle', function () {
        if (readSensorFlag) {
            console.log('Stopping readings...')
            clearInterval(intervalID);
            readSensorFlag = 0;
        } else {
            console.log('Starting readings...')
            intervalID = setInterval(function () {
                runPython('read_sensor.py')
            }, SAMPLE_TIME * 1000);
            readSensorFlag = 1;
        }
        io.emit('toggleStatus', readSensorFlag);
    });
});

/**
 * Schedule function to read sensor every x seconds
 */

// intervalID = setInterval(function(){runPython('./bin/python/read_sensor.py')}, 1 * 1000);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Output link to site for convenience
 */

console.log('Server started on: http://localhost:' + port)

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string' ?
        'Pipe ' + port :
        'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string' ?
        'pipe ' + addr :
        'port ' + addr.port;
    debug('Listening on ' + bind);
}

function runPython(scriptName) {
    // console.log('Attempting to run:' + scriptPath);
    PythonShell.run(scriptName, function (err, data) {
        if (err) return err;
        // console.log('Returning: ');
        // console.log(data[0]);
        io.emit('stats', data[0]);
        // io.emit('rpm', rpm.rpm);
    });
}